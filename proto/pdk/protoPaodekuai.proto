syntax = "proto3";
package protoPaodekuai;

message Player{
    int32 seat = 1; // 座位号
    string player = 2; // 玩家UUID
    string info = 3; // 玩家详细信息
    int32 ready_state = 4; // 玩家准备状态0:没准备，1准备
    int32 is_online = 5; // 是否在线 0:没在线，1在线
    int32 score = 6; //玩家剩余总分
    int32 is_baodan = 7; // 1:是报单玩家,  0:不是报单玩家
    int32 cards_len = 8;  // 玩家当前手牌张数
}

// 进入房间-c
message EnterRoomRequest {
	uint32 roomId = 1;
	string player = 3;
	string info = 4;
}

// 进入房间-s
message EnterRoomResponse {
	int32 code = 1;
	uint32 room_id = 2; // 6位房间号
	string room_kwargs = 3; // json 创建房间参数，由具体游戏各自解析字段
	string room_owner = 4; // 房主UID
	string room_owner_info = 5;
	int32 room_state = 6; // 房间状态
	int32 game_rolls = 7; // 当前局数
	repeated Player player = 8; // 所有玩家数据
}

// 其它玩家进入房间-s
message EnterRoomOtherResponse {
    uint32 code = 1; // 返回进入房间结果
    Player player = 2; // 玩家
}

// 玩家离线
message OnlineStatusResponse {
    string player = 1; // 玩家UUID
    bool status = 2; // 0 离线 1 上线
}

// 重连-s
message ReconnectResponse {
    repeated int32 p_cards = 1;  // 玩家手牌
    int32 is_open = 13;  // 0:没翻开, 1:翻开
    string table_uuid = 2;  // 上一个出牌的玩家
    repeated int32 table_cards = 3;  // 桌上打出的牌
    string table_card_type = 4;  // 桌上打出的牌的牌型

    int32 code = 9;
    uint32 room_id = 10; // 6位房间号
    string room_kwargs = 11; // json 创建房间参数，由具体游戏各自解析字段
    string room_owner = 12; // 房主UUID
    string room_owner_info = 5;
    int32 room_state = 6; // 房间状态
    int32 game_rolls = 7; // 当前局数
    repeated Player player = 8; //所有玩家数据
}

// 准备-c
message ReadyRequest{
    string player = 1;
}

// 广播准备-s
message ReadyResponse{
    int32 code = 1;  // 成功状态
    string uuid = 2;  // 准备玩家的uuid
}

// 发牌-s
message DealResponse {
	repeated int32 cards = 1;
}

// 出牌通知-s
message StartChuPaiResponse{
    string card_type = 1;  // 牌型
    string uuid = 2;
    string is_first = 3;  // 首次出牌 1:首次出牌,屏蔽提示和不要 0:不是首次出牌
    string find_333x = 4;  // 1:提示3个3是炸弹的玩家 0:不是
    string expire_seconds = 5;  // 剩余时间
}

// 请求出牌-c
message ChuPaiRequest{
    repeated int32 cards = 1;
}

// 出牌-s
message ChuPaiResponse{
    repeated int32 cards = 1;
    string card_type = 2;  // 牌型
    string uuid = 3;
    int32 res = 4;     // 1:成功,  2:失败
}

// 报单或要不起-s
message BaoDanResponse{
    int32 msg = 1;      //  1:报单,   2:要不起
    string uuid = 2;
}

// 请求退出房间-c
message ExitRoomRequest {
}

// 退出房间-s
message ExitRoomResponse {
    int32 code = 1; // 返回退出房间结果
    string player = 2; // 玩家UUID
    int32 type = 3; //玩家退出类型 1：正常退出，2：玩家分值不够被系统踢出
    //错误消息 1:正常退出 ，101：正在游戏中，玩家不能退出 ，
    //102：换庄后新庄家不能退出 103："换庄后闲家已经下注，不能退出
    int32 msg = 4;
}

// 请求解散房间-c
message DismissRoomRequest {
}

// 解散房间-s
message DismissRoomResponse {
    int32 code = 1; // 返回解散房间结果
    uint32 flag = 2; // 0 房主发起解散 1 投票发起解散,2 房间自动解散
}

// 玩家解散房间意见-c
message PlayerVoteRequest {
    bool flag = 1; //0:不同意 1：同意
}

// 玩家投票结果-s
message PlayerVoteResponse {
    int32 code = 1;
    string player = 2;
    int32 flag = 3; //0:不同意 1：同意
    int32 type = 4; //1：解散投票，2：退出投票
}

// 玩家投票状态-s
message SponsorVoteResponse {
    //已同意玩家退出的人
    message AgreeVote {
        string player = 1;
    }
    uint32 code = 1; // 6位房间号
    int32 expire_seconds = 2; // 剩余超时时间
    int32 total_time = 3; //总时间
    string sponsor = 4; // 发起投票玩家UUID
    repeated AgreeVote agreevote = 5; //同意解散的玩家列表
    int32 time_code = 6;
    int32 type = 7; //1: 解散房间投票 2：玩家退出投票
}